using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
public class Bike_controller : MonoBehaviour
{
    [Header("RigidBody")]
    [SerializeField] private Rigidbody rb;

    [Header("Wheel colliders")]
    [SerializeField] private WheelCollider frontWheelCollider;
    [SerializeField] private WheelCollider backWheelCollider;

    [Header("Wheel Transform")]
    [SerializeField] private Transform frontWheelTransform;
    [SerializeField] private Transform backWheelTransform;
    [SerializeField] private float TireRotateFactor = 2f;
    [SerializeField] private float currentTireRotation;

    [Header("Cycle Pivot Transform")]
    [SerializeField] private Transform cyclePivot;
    [SerializeField] private float maxTiltAngle = 6f;
    [SerializeField] private float CurrentTiltingAngle = 0f;

    [Header("Handle Transform")]
    [SerializeField] private Transform cycleHandle;
    
    [Header("Cycle pedal Transform")]
    [SerializeField] private Transform cycle_pedal;
    [SerializeField] private float currentPedalRotation;

    [Header("Bike Power")]
    [SerializeField] private float maxForwadSpeed = 15f;
    [SerializeField] private float maxReverseSpeed = -10f;
    [SerializeField] private float maxMotorTorque = 11f;
    public static float currentForwardSpeed=0f;
    [SerializeField] private float currentForwardSpeedTemp= 0f;
    [SerializeField] private float currentReverseSpeed=0f;
    [SerializeField] private float maxBrakeTorque = 150f;
    [SerializeField] private float presentBreakForce = 0f;

    [Header("Bike steering")]
    [SerializeField] private float maxSteerAngle = 11f;
    [SerializeField] private float CurrentSteeringAngle = 0f;
    [SerializeField] private float HorizontalInput = 0f;

    public static bool isReverseBtn;
    public static bool isRightbtn;
    public static bool isLeftbtn;
    public static bool isBrakingbtn;
    public static bool isSprintbtn;

    [Header("Audio FX")]
    [SerializeField] private AudioSource BackTireSound;

    private void FixedUpdate()
    {
        Vector3 rotation = transform.localEulerAngles;
        rotation.z = 0;
        transform.localEulerAngles = rotation;

        float pitch = Mathf.Lerp(0, 0.5f, currentForwardSpeed / maxForwadSpeed);
        float volume = Mathf.Lerp(0, 0.5f, currentForwardSpeed / maxForwadSpeed);
        var localVel = transform.InverseTransformDirection(rb.velocity);

        if (!isReverseBtn && currentForwardSpeed >= 0 || isReverseBtn && currentForwardSpeed >= 0)
        {
            BackTireSound.volume = Mathf.Lerp(0, 0.5f, currentForwardSpeed / maxForwadSpeed);
            BackTireSound.pitch = Mathf.Lerp(0, 0.5f, currentForwardSpeed / maxForwadSpeed);
        }
        else if(!isReverseBtn && currentReverseSpeed <= 0 || isReverseBtn && currentReverseSpeed <= 0)
        {
            BackTireSound.volume = Mathf.Lerp(0, 0.2f, currentReverseSpeed / maxForwadSpeed);
            BackTireSound.pitch = Mathf.Lerp(0, 0.2f, currentReverseSpeed / maxForwadSpeed);
        }
        else
        {
            BackTireSound.volume = 0;
            BackTireSound.pitch = 0;
        }if (Timer_script.PlayerCanMove)
        {
            currentForwardSpeedTemp = currentForwardSpeed;
            MoveBike();
            ApplyBrake();
            SteerBike();
            Set_turning_transformation_to_cycle();
            Make_Tires_rotate_wrt_speed();
            pedal_rotation();
        }
    }

    private void MoveBike()
    {
        var localVel = transform.InverseTransformDirection(rb.velocity);
        if (localVel.z > 0)
        {
            currentForwardSpeed = rb.velocity.magnitude * 3.6F;
        }
        else
        {
            currentReverseSpeed = rb.velocity.magnitude * -3.6F;
        }
        if (!Input.GetKey(KeyCode.S)||!isReverseBtn)
        {
            if (currentForwardSpeed < maxForwadSpeed)
            {
                if (!isSprintbtn)
                {
                    maxForwadSpeed = 10f;
                    backWheelCollider.motorTorque = Mathf.MoveTowards(backWheelCollider.motorTorque, maxMotorTorque, Time.deltaTime * 3f);
                }
                else
                {
                    maxForwadSpeed = 20f;
                    backWheelCollider.motorTorque = Mathf.MoveTowards(backWheelCollider.motorTorque, maxMotorTorque+5f, Time.deltaTime * 3f);
                }
            }
            else
            {
                backWheelCollider.motorTorque = 0;
            }
        }
        if (Input.GetKey(KeyCode.S)||isReverseBtn)
        {
            if (currentReverseSpeed > maxReverseSpeed)
            {

                backWheelCollider.motorTorque = -maxMotorTorque;

            }
            else
            {
                backWheelCollider.motorTorque = 0f;
            }
        }
    }

    private void ApplyBrake()
    {
        var localVel = transform.InverseTransformDirection(rb.velocity);
        if (Input.GetKey(KeyCode.Space) || isBrakingbtn)
        {
            if(localVel.z > 0)
            {
                currentForwardSpeed = Mathf.MoveTowards(currentForwardSpeed, 0f, 15 * Time.deltaTime);
            }
            else if(localVel.z < 0)
            {
                currentReverseSpeed = Mathf.MoveTowards(currentReverseSpeed, 0f, 15 * Time.deltaTime);
            }
            else
            {
                currentForwardSpeed = 0f;
                currentReverseSpeed = 0f;
            }
            frontWheelCollider.brakeTorque = Mathf.MoveTowards(40f, maxBrakeTorque, 15 * Time.deltaTime);
            backWheelCollider.brakeTorque = Mathf.MoveTowards(40f, maxBrakeTorque, 15 * Time.deltaTime);
            rb.constraints = RigidbodyConstraints.FreezeRotation;
        }
        else
        {
            frontWheelCollider.brakeTorque = 0;
            backWheelCollider.brakeTorque = 0;
            rb.constraints = RigidbodyConstraints.FreezeRotationZ;
        }
    }

    private void SteerBike(){
        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow) || isRightbtn)
        {
            HorizontalInput = Mathf.MoveTowards(HorizontalInput, 1f, 3 * Time.deltaTime);
        }
        else if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow) || isLeftbtn)
        {
            HorizontalInput = Mathf.MoveTowards(HorizontalInput, -1f, 3 * Time.deltaTime);
        }
        else
        {
            HorizontalInput = Mathf.MoveTowards(HorizontalInput, 0f, 3 *Time.deltaTime);
        }
        if (currentForwardSpeed < 5f)
        {
            maxSteerAngle = 22f;
        }
        else
        {
            maxSteerAngle = Mathf.MoveTowards(maxSteerAngle, 11f, 3 * Time.deltaTime);
        }
        CurrentSteeringAngle = maxSteerAngle * HorizontalInput;
        frontWheelCollider.steerAngle = CurrentSteeringAngle;
       
    }
    private void Set_turning_transformation_to_cycle()
    {
        if (currentForwardSpeed > 0)
        {
            cycleHandle.localEulerAngles = new Vector3(0f, CurrentSteeringAngle, 0f);
            if (!Input.GetKey(KeyCode.S) || !isReverseBtn)
            {
                CurrentTiltingAngle = maxTiltAngle * HorizontalInput;
                cyclePivot.localEulerAngles = new Vector3(0f, 0f, -1 * CurrentTiltingAngle * 3);
            }
            else if (Input.GetKey(KeyCode.S) || isReverseBtn)
            {
                CurrentTiltingAngle = Mathf.MoveTowards(CurrentTiltingAngle, 0f, 10 * Time.deltaTime);
                cyclePivot.localEulerAngles = new Vector3(0f, 0f, -1 * CurrentTiltingAngle * 3);
            }
        }
    }
    private void Make_Tires_rotate_wrt_speed()
    {
        var localVel = transform.InverseTransformDirection(rb.velocity);
        if (localVel.z > 0)
        {
            currentTireRotation += currentForwardSpeed;
        }
        else
        {
            currentTireRotation += currentReverseSpeed;
        }
        currentTireRotation %= 360;
        frontWheelTransform.localEulerAngles = new Vector3(currentTireRotation, 0f, 0f);
        backWheelTransform.localEulerAngles = new Vector3(currentTireRotation, 0f, 0f);
    }
    private void pedal_rotation()
    {
        var localVel = transform.InverseTransformDirection(rb.velocity);
        if (localVel.z > 0)
        {
            currentPedalRotation += currentForwardSpeed * .5f;
        }
        else
        {
            currentPedalRotation += currentReverseSpeed * .5f;
        }
        currentPedalRotation %= 360;
        cycle_pedal.localEulerAngles = new Vector3(currentPedalRotation, 0f, 0f);
        cycle_pedal.GetChild(0).transform.localEulerAngles = new Vector3(-1 * currentPedalRotation, 0f, 0f);
        cycle_pedal.GetChild(1).transform.localEulerAngles = new Vector3(-1* currentPedalRotation, 0f, 0f);
    }

}
